/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/
package com.new_vcs_conflicts.bubbledata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.new_vcs_conflicts.bubbledata.Bubble;
import com.new_vcs_conflicts.bubbledata.Table2ww;
import com.new_vcs_conflicts.bubbledata.service.Table2wwService;


/**
 * Controller object for domain model class Table2ww.
 * @see Table2ww
 */
@RestController("bubbledata.Table2wwController")
@Api(value = "Table2wwController", description = "Exposes APIs to work with Table2ww resource.")
@RequestMapping("/bubbledata/Table2ww")
public class Table2wwController {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table2wwController.class);

    @Autowired
	@Qualifier("bubbledata.Table2wwService")
	private Table2wwService table2wwService;

	@ApiOperation(value = "Creates a new Table2ww instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table2ww createTable2ww(@RequestBody Table2ww table2ww) {
		LOGGER.debug("Create Table2ww with information: {}" , table2ww);

		table2ww = table2wwService.create(table2ww);
		LOGGER.debug("Created Table2ww with information: {}" , table2ww);

	    return table2ww;
	}

    @ApiOperation(value = "Returns the Table2ww instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table2ww getTable2ww(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table2ww with id: {}" , id);

        Table2ww foundTable2ww = table2wwService.getById(id);
        LOGGER.debug("Table2ww details with id: {}" , foundTable2ww);

        return foundTable2ww;
    }

    @ApiOperation(value = "Updates the Table2ww instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table2ww editTable2ww(@PathVariable("id") Integer id, @RequestBody Table2ww table2ww) throws EntityNotFoundException {
        LOGGER.debug("Editing Table2ww with id: {}" , table2ww.getId());

        table2ww.setId(id);
        table2ww = table2wwService.update(table2ww);
        LOGGER.debug("Table2ww details with id: {}" , table2ww);

        return table2ww;
    }

    @ApiOperation(value = "Deletes the Table2ww instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable2ww(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table2ww with id: {}" , id);

        Table2ww deletedTable2ww = table2wwService.delete(id);

        return deletedTable2ww != null;
    }

    /**
     * @deprecated Use {@link #findTable2wws(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table2ww instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table2ww> searchTable2wwsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table2wws list");
        return table2wwService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table2ww instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table2ww> findTable2wws(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table2wws list");
        return table2wwService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table2ww instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table2ww> filterTable2wws(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table2wws list");
        return table2wwService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable2wws(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table2wwService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table2ww instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable2wws( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table2wws");
		return table2wwService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable2wwAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table2wwService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/bubbles", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the bubbles instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Bubble> findAssociatedBubbles(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated bubbles");
        return table2wwService.findAssociatedBubbles(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table2wwService instance
	 */
	protected void setTable2wwService(Table2wwService service) {
		this.table2wwService = service;
	}

}

